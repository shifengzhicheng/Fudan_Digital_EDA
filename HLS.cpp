#include "HLS.h"
// 第一部分是基于读到的资源创建块的关系图，块内是不同的有向无环图
/* 这个部分接收的参数是基本块的向量bbs，函数的fn_name，输入的变量vars，以及返回值ret_type
  基本块的结构包含vector<statement> _statements和_label，
  statement是IR语句中的一句代码，有返回值的操作可以使用get_var()得到返回值
  get_type()可以得到语句的操作类型
  get_num_oprands()可以得到操作数的数量，
  然后get_oprand(k)得到第k个操作数(从0开始)
  最后这个操作将每个块内流程变成一个图 */

// 第二部分是基于有向无环图进行拓扑排序，得到每个计算单元的一个基本的时序约束
/* 这个部分接收第一部分生成的图graph进行拓扑排序，包括带周期的ASAP和带周期的ALAP，
  这部分信息将被存储在图的每个节点中 */

// 第三部分在基本的时序约束的基础上再基于资源进行整数线性规划得到最优的Latency
/* 这个部分接收上面的带有周期约束条件的节点，进行ILP，实现Latency最小的SDC描述并计算出图中所有节点的运行周期 */

// 第四部分得到了最优Latency以后，还要这个时候每个单元的busy周期，并将数据与寄存器进行绑定，
// 假定寄存器数量没有上限，但是需要使用尽可能少的寄存器
/* 这个部分基于已经有的单元的时序情况分配寄存器来存储不同的数据 */

// 第五部分对计算的资源同样进行绑定，在有限的计算资源约束下完成与寄存器的配对，需要加入选择器进行配对
// 使用匈牙利算法或者最小代价匹配实现

// 第六部分是控制逻辑综合，控制不同块之间的跳转，最终的代码逻辑的实现部分